{"version":3,"sources":["Themes.js","App.js","LocalStorage.js","reportWebVitals.js","index.js"],"names":["lightTheme","body","fontColor","darkTheme","GlobalStyles","createGlobalStyle","props","theme","StyledApp","styled","div","App","defaultValue","key","React","useState","stickyValue","window","localStorage","getItem","console","log","JSON","parse","value","setValue","useEffect","setItem","stringify","useStickyState","setTheme","className","type","id","onChange","checked","htmlFor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAEaA,EAAa,CACxBC,KAAM,yBACNC,UAAW,gBAGAC,EAAY,CACvBF,KAAM,2BACNC,UAAW,gBAGAE,EAAeC,YAAH,uEAEH,SAACC,GAAD,OAAWA,EAAMC,MAAMN,Q,aCPvCO,EAAYC,IAAOC,IAAV,2CACJ,SAACJ,GAAD,OAAWA,EAAMC,MAAML,aA2BnBS,MAxBf,WAAgB,IAAD,ECTR,SAAwBC,EAAcC,GAAM,IAAD,EACpBC,IAAMC,UAAS,WACvC,IAAMC,EAAcC,OAAOC,aAAaC,QAAQN,GAEhD,OADAO,QAAQC,IAAI,aAAcL,GACH,OAAhBA,EACHM,KAAKC,MAAMP,GACXJ,KANwC,mBACvCY,EADuC,KAChCC,EADgC,KAW9C,OAHAX,IAAMY,WAAU,WACdT,OAAOC,aAAaS,QAAQd,EAAKS,KAAKM,UAAUJ,MAC/C,CAACX,EAAKW,IACF,CAACA,EAAOC,GDDSI,CAAe,QAAS,SADrC,mBACNtB,EADM,KACCuB,EADD,KAOb,OACE,eAAC,IAAD,CAAevB,MAAiB,UAAVA,EAAoBP,EAAaG,EAAvD,UACE,cAACC,EAAD,IACA,eAACI,EAAD,WACE,sBAAKuB,UAAU,SAAf,UAEE,uBAAOC,KAAK,WAAWC,GAAG,SAASF,UAAU,mBAAmBG,SAAU,WAT5DJ,EAAV,UAAVvB,EAA6B,OAAmB,UASsD4B,QAAmB,SAAV5B,IACzG,uBAAO6B,QAAQ,SAASL,UAAU,gBAAlC,SACE,sBAAMA,UAAU,kCAGpB,qBAAKA,UAAU,aAAf,6BEjBOM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.73f0179a.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const lightTheme = {\n  body: \"var(--blue-background)\",\n  fontColor: \"var(--black)\",\n};\n\nexport const darkTheme = {\n  body: \"var(--indigo-background)\",\n  fontColor: \"var(--black)\",\n};\n\nexport const GlobalStyles = createGlobalStyle`\n\tbody {\n\t\tbackground-color: ${(props) => props.theme.body};\n\t}\n`;","import \"./App.css\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { lightTheme, darkTheme, GlobalStyles } from \"./Themes.js\";\nimport { useStickyState } from \"./LocalStorage\";\n// import NavBar from \"./NavBar/NavBar.jsx\";\n// import { useState } from \"react\";\n\nconst StyledApp = styled.div`\n  color: ${(props) => props.theme.fontColor};\n`;\n\nfunction App() {\n  const [theme, setTheme] = useStickyState(\"light\", \"theme\");\n\n  const themeToggler = () => {\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n  };\n\n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <GlobalStyles />\n      <StyledApp>\n        <div className=\"navbar\">\n          {/* <NavBar onToggle={themeToggler} theme={theme} /> */}\n          <input type=\"checkbox\" id=\"toggle\" className=\"toggle--checkbox\" onChange={() => themeToggler()} checked={theme === 'dark'} />\n          <label htmlFor=\"toggle\" className=\"toggle--label\">\n            <span className=\"toggle--label-background\"></span>\n          </label>\n        </div>\n        <div className=\"background\">Hi there</div>\n      </StyledApp>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","import React from 'react'\n\nexport function useStickyState(defaultValue, key) {\n    const [value, setValue] = React.useState(() => {\n      const stickyValue = window.localStorage.getItem(key);\n      console.log('from local', stickyValue);\n      return stickyValue !== null\n        ? JSON.parse(stickyValue)\n        : defaultValue;\n    });\n    React.useEffect(() => {\n      window.localStorage.setItem(key, JSON.stringify(value));\n    }, [key, value]);\n    return [value, setValue];\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}